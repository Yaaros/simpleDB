package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    DbIterator child1;
    DbIterator child2;
    JoinPredicate predicate;

    Tuple leftTuple;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * Should return a TupleDesc that represents the schema for the joined tuples. 
     *@see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        leftTuple = null;//reset join operation
        // some code goes here
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();

        // some code goes here
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        leftTuple = null;//reset join operation
        // some code goes here
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator later on if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // Merge the TupleDescs of the two child iterators
        TupleDesc mergedDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());

        while (leftTuple != null || child1.hasNext()) {
            if (leftTuple == null) {
                leftTuple = child1.next();
                child2.rewind();
            }

            while (child2.hasNext()) {
                Tuple rightTuple = child2.next();
                if (predicate.filter(leftTuple, rightTuple)) {
                    // Create a new tuple of the mergedDesc type
                    Tuple mergedTuple = new Tuple(mergedDesc);

                    // Copy the fields from both tuples into the new tuple
                    int fieldIndex = 0;
                    for (int i = 0; i < leftTuple.getTupleDesc().numFields(); i++) {
                        mergedTuple.setField(fieldIndex++, leftTuple.getField(i));
                    }
                    for (int i = 0; i < rightTuple.getTupleDesc().numFields(); i++) {
                        mergedTuple.setField(fieldIndex++, rightTuple.getField(i));
                    }

                    // Return the new merged tuple
                    return mergedTuple;
                }
            }
            // Move to the next left tuple for the next call of fetchNext
            leftTuple = null;
        }
        return null;
    }
    /**
     * See Operator.java for help.
     * */


    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length != 2) {
            throw new IllegalArgumentException("Expected exactly two children.");
        }
        child1 = children[0];
        child2 = children[1];
    }
}
